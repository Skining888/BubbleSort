#pragma once

//函数说明：找出数组元素中第一个乱序的数字，并返回下标
// 入参：int arr[]，要排序的数组的地址
//		 int n，要排序的数组的元素个数
//		 int mid，希尔排序中的分组的大小，即要标记的元素的间隔大小，普通插入排序的间隔为1，希尔的间隔为mid
//出参：返回第一个乱序的元素的下标
int Insort(int arr[], int n, int mid);

//函数说明：执行插入排序，与普通插入不同的是。希尔排序排的是有一定间隔mid的元素之间的顺序
// 入参：int arr[]，要排序的数组的地址
//		 int n，要排序的数组的元素个数
//		 int mid，希尔排序中的分组的大小，即要标记的元素的间隔大小，普通插入排序的间隔为1，希尔的间隔为mid
//出参：无
void InsertSort(int arr[], int n, int mid);

//函数说明：希尔排序，每次的分组大小mid都为之前的1/2，第一次的分组一般以n/2为准，遍历到mid = 1，即进行最后一次插入排序，结束排序
//入参：int arr[]，要排序的数组的地址
//		int n，要排序的数组的元素个数
//出参：无
void ShellSort(int arr[], int n);


//希尔排序总结：
// 中心思想：高阶的插入排序思想，适用于数组元素特别多的情况。普通插入排序以相邻间隔为1的元素为比较对象，希尔排序每次去比较的两个元素之间的间隔为分组的大小
// 每排完一次，分组间隔/2，一次排序，直到间隔等于1时，执行最后一次普通的插入排序，排序结束
// 希尔排序的时间复杂度：O（nlogn）
//希尔排序是不稳定的
